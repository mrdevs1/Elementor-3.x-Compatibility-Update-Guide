🧩 Elementor 3.x+ Compatibility Update Guide

If your custom Elementor widgets were originally built for versions below Elementor 3.0, you may encounter critical errors after updating to the latest Elementor release.
This happens because some widget control parameters and structures have been deprecated or replaced with Elementor’s new Global Design System.

This guide explains what changed and how to update your widget code safely.

⚠️ Why This Happens

Starting from Elementor version 3.0, the framework introduced Global Colors and Global Typography.
Before this update, widget styling relied on the old scheme property (like Scheme_Color and Scheme_Typography).
Now, Elementor uses global keys referencing Global_Colors and Global_Typography classes.

If your widget still uses the old scheme-based system, you’ll likely see:

Critical errors or white screens after Elementor updates

Deprecated function warnings in PHP logs

Broken color or typography controls

👉 What Changed
Previously (Deprecated)

✔ Color Control Example
$this->add_control(
    'subtitle_color',
    [
        'label' => __( 'Color', 'plugin-domain' ),
        'type' => \Elementor\Controls_Manager::COLOR,
        'scheme' => [
            'type'  => \Elementor\Scheme_Color::get_type(),
            'value' => \Elementor\Scheme_Color::COLOR_1,
        ],
        'default' => '#444',
    ]
);

✍️ Typography Control Example
$this->add_group_control(
    \Elementor\Group_Control_Typography::get_type(),
    [
        'name'   => 'content_typography',
        'label'  => __( 'Typography', 'plugin-domain' ),
        'scheme' => \Elementor\Scheme_Typography::TYPOGRAPHY_1,
        'selector' => '{{WRAPPER}} .widget-content',
    ]
);

✅ Updated (Elementor 3.0+ Compatible)
🎨 Color Control (New)
$this->add_control(
    'subtitle_color',
    [
        'label' => __( 'Color', 'plugin-domain' ),
        'type'  => \Elementor\Controls_Manager::COLOR,
        'global' => [
            'default' => \Elementor\Core\Kits\Documents\Tabs\Global_Colors::COLOR_PRIMARY,
        ],
        'default' => '#444',
    ]
);

✍️ Typography Control (New)
$this->add_group_control(
    \Elementor\Group_Control_Typography::get_type(),
    [
        'name'     => 'content_typography',
        'label'    => __( 'Typography', 'plugin-domain' ),
        'global'   => [
            'default' => \Elementor\Core\Kits\Documents\Tabs\Global_Typography::TYPOGRAPHY_PRIMARY,
        ],
        'selector' => '{{WRAPPER}} .widget-content',
    ]
);

✅ Summary of Changes
Feature	Old (Deprecated)	New (Recommended)
Color Control	'scheme' => [ 'type' => \Elementor\Scheme_Color::get_type(), 'value' => \Elementor\Scheme_Color::COLOR_1 ]	'global' => [ 'default' => \Elementor\Core\Kits\Documents\Tabs\Global_Colors::COLOR_PRIMARY ]
Typography Control	'scheme' => \Elementor\Scheme_Typography::TYPOGRAPHY_1	'global' => [ 'default' => \Elementor\Core\Kits\Documents\Tabs\Global_Typography::TYPOGRAPHY_PRIMARY ]


🛠 Steps to Fix

Open your custom Elementor widget PHP file (usually inside widgets/ or includes/widgets/).

Find all occurrences of scheme in your controls.

Replace the old color and typography definitions with the new global syntax.

Save and test your widget in Elementor editor.

Check your error logs to ensure no deprecated warnings remain.

🧩 Optional Tip: Add Version Check

To make your widget compatible with both old and new Elementor versions:

if ( defined( 'ELEMENTOR_VERSION' ) && version_compare( ELEMENTOR_VERSION, '3.0.0', '>=' ) ) {
    $global_color = [ 'default' => \Elementor\Core\Kits\Documents\Tabs\Global_Colors::COLOR_PRIMARY ];
} else {
    $global_color = [
        'type'  => \Elementor\Scheme_Color::get_type(),
        'value' => \Elementor\Scheme_Color::COLOR_1,
    ];
}

$this->add_control(
    'subtitle_color',
    [
        'label' => __( 'Color', 'plugin-domain' ),
        'type'  => \Elementor\Controls_Manager::COLOR,
        'global' => $global_color,
        'default' => '#444',
    ]
);

🧱 Recommended Reading

Elementor Developer Docs – https://developers.elementor.com/docs/editor-controls/global-style/


💡 Final Notes

Always backup your widget code before editing.

Avoid using deprecated classes (like Scheme_Color) in new projects.

Use Elementor’s global design system for future-proof widgets.
